{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport Web3 from 'web3';\nexport const web3init = createAsyncThunk(\"web3init\", async (data, thunkAPI) => {\n  try {\n    if (Web3.givenProvider) {\n      const web3 = new Web3(Web3.givenProvider);\n      await Web3.givenProvider.enable();\n      const address = await web3.eth.getAccounts();\n      console.log(address);\n      return {\n        web3,\n        address: address[0]\n      };\n    }\n  } catch (error) {}\n});\nexport const web3Reload = createAsyncThunk(\"web3Reload\", async (data, thunkAPI) => {\n  try {\n    if (Web3.givenProvider) {\n      const web3 = new Web3(Web3.givenProvider);\n      const address = await web3.eth.getAccounts();\n      console.log(address);\n      return {\n        web3,\n        address: address[0]\n      };\n    }\n  } catch (error) {}\n});\nconst connectSlice = createSlice({\n  name: 'connectSlice',\n  initialState: {\n    web3: null,\n    address: null,\n    name: 'ali',\n    msg: null\n  },\n  reducers: {},\n  extraReducers: {\n    [web3init.fulfilled]: (state, action) => {\n      try {\n        state.web3 = action.payload.web3;\n        state.address = action.payload.address;\n      } catch (error) {\n        console.log(error.message); //       state.msg = error\n      }\n    },\n    [web3Reload.fulfilled]: (state, action) => {\n      try {\n        state.web3 = action.payload.web3;\n        state.address = action.payload.address;\n      } catch (error) {}\n    },\n    [web3Reload.rejected]: (state, action) => {\n      state.web3 = null;\n      state.address = null;\n      state.msg = \"user denied\";\n    },\n    [web3init.rejected]: (state, action) => {\n      console.log(\"asd\");\n      state.web3 = null;\n      state.address = null;\n      state.msg = \"user denied\";\n    }\n  }\n});\nexport const connectReducer = connectSlice.reducer;","map":{"version":3,"sources":["C:/Users/Acer/Documents/PIAIC/pana/Erc20/truffle/client/src/store/connectSlice.js"],"names":["createSlice","createAsyncThunk","Web3","web3init","data","thunkAPI","givenProvider","web3","enable","address","eth","getAccounts","console","log","error","web3Reload","connectSlice","name","initialState","msg","reducers","extraReducers","fulfilled","state","action","payload","message","rejected","connectReducer","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAGA,OAAO,MAAMC,QAAQ,GAAGF,gBAAgB,CACpC,UADoC,EAEpC,OAAOG,IAAP,EAAaC,QAAb,KAA0B;AACtB,MAAI;AACA,QAAIH,IAAI,CAACI,aAAT,EAAwB;AACpB,YAAMC,IAAI,GAAG,IAAIL,IAAJ,CAASA,IAAI,CAACI,aAAd,CAAb;AACA,YAAMJ,IAAI,CAACI,aAAL,CAAmBE,MAAnB,EAAN;AACA,YAAMC,OAAO,GAAG,MAAMF,IAAI,CAACG,GAAL,CAASC,WAAT,EAAtB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACA,aAAO;AACHF,QAAAA,IADG;AACGE,QAAAA,OAAO,EAAEA,OAAO,CAAC,CAAD;AADnB,OAAP;AAGH;AACJ,GAXD,CAWE,OAAOK,KAAP,EAAc,CAEf;AACJ,CAjBmC,CAAjC;AAqBP,OAAO,MAAMC,UAAU,GAAGd,gBAAgB,CACtC,YADsC,EAEtC,OAAOG,IAAP,EAAaC,QAAb,KAA0B;AACtB,MAAI;AACA,QAAIH,IAAI,CAACI,aAAT,EAAwB;AACpB,YAAMC,IAAI,GAAG,IAAIL,IAAJ,CAASA,IAAI,CAACI,aAAd,CAAb;AAEA,YAAMG,OAAO,GAAG,MAAMF,IAAI,CAACG,GAAL,CAASC,WAAT,EAAtB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACA,aAAO;AACHF,QAAAA,IADG;AACGE,QAAAA,OAAO,EAAEA,OAAO,CAAC,CAAD;AADnB,OAAP;AAGH;AACJ,GAXD,CAWE,OAAOK,KAAP,EAAc,CAEf;AACJ,CAjBqC,CAAnC;AAsBP,MAAME,YAAY,GAAGhB,WAAW,CAC5B;AACIiB,EAAAA,IAAI,EAAE,cADV;AAEIC,EAAAA,YAAY,EAAE;AACVX,IAAAA,IAAI,EAAE,IADI;AAEVE,IAAAA,OAAO,EAAE,IAFC;AAGVQ,IAAAA,IAAI,EAAE,KAHI;AAIVE,IAAAA,GAAG,EAAE;AAJK,GAFlB;AAQIC,EAAAA,QAAQ,EAAE,EARd;AAUOC,EAAAA,aAAa,EAAE;AACd,KAAClB,QAAQ,CAACmB,SAAV,GAAsB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAI;AACAD,QAAAA,KAAK,CAAChB,IAAN,GAAaiB,MAAM,CAACC,OAAP,CAAelB,IAA5B;AACAgB,QAAAA,KAAK,CAACd,OAAN,GAAgBe,MAAM,CAACC,OAAP,CAAehB,OAA/B;AACH,OAHD,CAGE,OAAOK,KAAP,EAAc;AACZF,QAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACY,OAAlB,EADY,CAEZ;AACH;AAEJ,KAVa;AAWd,KAACX,UAAU,CAACO,SAAZ,GAAwB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvC,UAAI;AACAD,QAAAA,KAAK,CAAChB,IAAN,GAAaiB,MAAM,CAACC,OAAP,CAAelB,IAA5B;AACAgB,QAAAA,KAAK,CAACd,OAAN,GAAgBe,MAAM,CAACC,OAAP,CAAehB,OAA/B;AACH,OAHD,CAGE,OAAOK,KAAP,EAAc,CAEf;AACJ,KAlBa;AAoBd,KAACC,UAAU,CAACY,QAAZ,GAAuB,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACtCD,MAAAA,KAAK,CAAChB,IAAN,GAAa,IAAb;AACAgB,MAAAA,KAAK,CAACd,OAAN,GAAgB,IAAhB;AACAc,MAAAA,KAAK,CAACJ,GAAN,GAAY,aAAZ;AACH,KAxBa;AA0Bd,KAAChB,QAAQ,CAACwB,QAAV,GAAqB,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACpCZ,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAU,MAAAA,KAAK,CAAChB,IAAN,GAAa,IAAb;AACAgB,MAAAA,KAAK,CAACd,OAAN,GAAgB,IAAhB;AACAc,MAAAA,KAAK,CAACJ,GAAN,GAAY,aAAZ;AACH;AA/Ba;AAVtB,CAD4B,CAAhC;AA+CA,OAAO,MAAMS,cAAc,GAAGZ,YAAY,CAACa,OAApC","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport Web3 from 'web3'\r\n\r\n\r\nexport const web3init = createAsyncThunk(\r\n    \"web3init\",\r\n    async (data, thunkAPI) => {\r\n        try {\r\n            if (Web3.givenProvider) {\r\n                const web3 = new Web3(Web3.givenProvider)\r\n                await Web3.givenProvider.enable()\r\n                const address = await web3.eth.getAccounts()\r\n\r\n                console.log(address)\r\n                return {\r\n                    web3, address: address[0]\r\n                }\r\n            }\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n)\r\n\r\n\r\nexport const web3Reload = createAsyncThunk(\r\n    \"web3Reload\",\r\n    async (data, thunkAPI) => {\r\n        try {\r\n            if (Web3.givenProvider) {\r\n                const web3 = new Web3(Web3.givenProvider)\r\n\r\n                const address = await web3.eth.getAccounts()\r\n\r\n                console.log(address)\r\n                return {\r\n                    web3, address: address[0]\r\n                }\r\n            }\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n)\r\n\r\n\r\n\r\nconst connectSlice = createSlice(\r\n    {\r\n        name: 'connectSlice',\r\n        initialState: {\r\n            web3: null,\r\n            address: null,\r\n            name: 'ali',\r\n            msg: null\r\n        },\r\n        reducers: {\r\n\r\n        }, extraReducers: {\r\n            [web3init.fulfilled]: (state, action) => {\r\n                try {\r\n                    state.web3 = action.payload.web3\r\n                    state.address = action.payload.address\r\n                } catch (error) {\r\n                    console.log(error.message)\r\n                    //       state.msg = error\r\n                }\r\n\r\n            },\r\n            [web3Reload.fulfilled]: (state, action) => {\r\n                try {\r\n                    state.web3 = action.payload.web3\r\n                    state.address = action.payload.address\r\n                } catch (error) {\r\n\r\n                }\r\n            }\r\n            ,\r\n            [web3Reload.rejected]: (state, action) => {\r\n                state.web3 = null\r\n                state.address = null\r\n                state.msg = \"user denied\"\r\n            }\r\n            ,\r\n            [web3init.rejected]: (state, action) => {\r\n                console.log(\"asd\")\r\n                state.web3 = null\r\n                state.address = null\r\n                state.msg = \"user denied\"\r\n            }\r\n        }\r\n    }\r\n)\r\n\r\nexport const connectReducer = connectSlice.reducer"]},"metadata":{},"sourceType":"module"}